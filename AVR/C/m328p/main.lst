
main:     ファイル形式 elf32-avr

セクション:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000001aa  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800138  00800138  00000276  2**0
                  ALLOC
  3 .stab         00000834  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dbe  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000186a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000187c  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00001eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00002452  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  0000246c  2**0
                  CONTENTS, READONLY, DEBUGGING

セクション .text の逆アセンブル:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ea       	ldi	r30, 0xAA	; 170
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 33       	cpi	r26, 0x38	; 56
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e3       	ldi	r26, 0x38	; 56
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 33       	cpi	r26, 0x3D	; 61
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  9e:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initialize>:
	return 0;
}

void initialize( void)
{
	DDRB   = _BV( PB0 );
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	84 b9       	out	0x04, r24	; 4
	TCCR1B = _BV( WGM12) | _BV( CS12 );        // TIMER1_CTC,   CK/256
  aa:	8c e0       	ldi	r24, 0x0C	; 12
  ac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A  = 12800000 / 256 / 1000 - 1;        // 1[ms] compare match interrupt
  b0:	81 e3       	ldi	r24, 0x31	; 49
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  b8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCNT1  = 0;
  bc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  c0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIMSK1 = _BV( OCIE1A );
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
  ca:	08 95       	ret

000000cc <disp8x8>:
	}
}


void disp8x8( unsigned char w[] )
{
  cc:	20 e0       	ldi	r18, 0x00	; 0
  ce:	30 e0       	ldi	r19, 0x00	; 0
	for( unsigned char i = 0; i < 7; i++ ) {
		PORTB = w[ i ];
		PORTD = ~( _BV( i ) );
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	70 e0       	ldi	r23, 0x00	; 0


void disp8x8( unsigned char w[] )
{
	for( unsigned char i = 0; i < 7; i++ ) {
		PORTB = w[ i ];
  d4:	fc 01       	movw	r30, r24
  d6:	41 91       	ld	r20, Z+
  d8:	cf 01       	movw	r24, r30
  da:	45 b9       	out	0x05, r20	; 5
		PORTD = ~( _BV( i ) );
  dc:	ab 01       	movw	r20, r22
  de:	02 2e       	mov	r0, r18
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <disp8x8+0x18>
  e2:	44 0f       	add	r20, r20
  e4:	0a 94       	dec	r0
  e6:	ea f7       	brpl	.-6      	; 0xe2 <disp8x8+0x16>
  e8:	40 95       	com	r20
  ea:	4b b9       	out	0x0b, r20	; 11
  ec:	2f 5f       	subi	r18, 0xFF	; 255
  ee:	3f 4f       	sbci	r19, 0xFF	; 255
}


void disp8x8( unsigned char w[] )
{
	for( unsigned char i = 0; i < 7; i++ ) {
  f0:	27 30       	cpi	r18, 0x07	; 7
  f2:	31 05       	cpc	r19, r1
  f4:	79 f7       	brne	.-34     	; 0xd4 <disp8x8+0x8>
		PORTB = w[ i ];
		PORTD = ~( _BV( i ) );
	}
}
  f6:	08 95       	ret

000000f8 <disp>:
	TIMSK1 = _BV( OCIE1A );
}

void disp( unsigned char week )
{
	if( week==0 ){
  f8:	81 11       	cpse	r24, r1
  fa:	03 c0       	rjmp	.+6      	; 0x102 <disp+0xa>
		disp8x8( font_0 );   // 日
  fc:	80 e3       	ldi	r24, 0x30	; 48
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	1d c0       	rjmp	.+58     	; 0x13c <disp+0x44>
	} else if( week==1 ) {
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	19 f4       	brne	.+6      	; 0x10c <disp+0x14>
		disp8x8( font_1 );   // 月
 106:	88 e2       	ldi	r24, 0x28	; 40
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	18 c0       	rjmp	.+48     	; 0x13c <disp+0x44>
	} else if( week==2 ) {
 10c:	82 30       	cpi	r24, 0x02	; 2
 10e:	19 f4       	brne	.+6      	; 0x116 <disp+0x1e>
		disp8x8( font_2 );   // 火
 110:	80 e2       	ldi	r24, 0x20	; 32
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	13 c0       	rjmp	.+38     	; 0x13c <disp+0x44>
	} else if( week==3 ) {
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	19 f4       	brne	.+6      	; 0x120 <disp+0x28>
		disp8x8( font_3 );   // 水
 11a:	88 e1       	ldi	r24, 0x18	; 24
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	0e c0       	rjmp	.+28     	; 0x13c <disp+0x44>
	} else if( week==4 ) {
 120:	84 30       	cpi	r24, 0x04	; 4
 122:	19 f4       	brne	.+6      	; 0x12a <disp+0x32>
		disp8x8( font_4 );   // 木
 124:	80 e1       	ldi	r24, 0x10	; 16
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	09 c0       	rjmp	.+18     	; 0x13c <disp+0x44>
	} else if( week==5 ) {
 12a:	85 30       	cpi	r24, 0x05	; 5
 12c:	19 f4       	brne	.+6      	; 0x134 <disp+0x3c>
		disp8x8( font_5 );   // 金
 12e:	88 e0       	ldi	r24, 0x08	; 8
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	04 c0       	rjmp	.+8      	; 0x13c <disp+0x44>
	} else if( week==6 ) {
 134:	86 30       	cpi	r24, 0x06	; 6
 136:	21 f4       	brne	.+8      	; 0x140 <disp+0x48>
		disp8x8( font_6 );   // 土
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	0c 94 66 00 	jmp	0xcc	; 0xcc <disp8x8>
 140:	08 95       	ret

00000142 <__vector_11>:
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	8f 93       	push	r24
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <f_1ms>
 154:	8f 91       	pop	r24
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <main>:

int main( void )
{
	unsigned char counter = 0;

	initialize();
 160:	0e 94 53 00 	call	0xa6	; 0xa6 <initialize>

	sei();
 164:	78 94       	sei
int main( void );


int main( void )
{
	unsigned char counter = 0;
 166:	c0 e0       	ldi	r28, 0x00	; 0

	while( 1 ) {
		while( ! f_1ms) ;
		f_1ms = 0;
		counter++;
		if( counter % 5 == 0 ) disp( 3 );
 168:	d5 e0       	ldi	r29, 0x05	; 5
	initialize();

	sei();

	while( 1 ) {
		while( ! f_1ms) ;
 16a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <f_1ms>
 16e:	88 23       	and	r24, r24
 170:	e1 f3       	breq	.-8      	; 0x16a <main+0xa>
		f_1ms = 0;
 172:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <f_1ms>
		counter++;
 176:	cf 5f       	subi	r28, 0xFF	; 255
		if( counter % 5 == 0 ) disp( 3 );
 178:	8c 2f       	mov	r24, r28
 17a:	6d 2f       	mov	r22, r29
 17c:	0e 94 c7 00 	call	0x18e	; 0x18e <__udivmodqi4>
 180:	91 11       	cpse	r25, r1
 182:	f3 cf       	rjmp	.-26     	; 0x16a <main+0xa>
	} else if( week==1 ) {
		disp8x8( font_1 );   // 月
	} else if( week==2 ) {
		disp8x8( font_2 );   // 火
	} else if( week==3 ) {
		disp8x8( font_3 );   // 水
 184:	88 e1       	ldi	r24, 0x18	; 24
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 66 00 	call	0xcc	; 0xcc <disp8x8>
 18c:	ee cf       	rjmp	.-36     	; 0x16a <main+0xa>

0000018e <__udivmodqi4>:
 18e:	99 1b       	sub	r25, r25
 190:	79 e0       	ldi	r23, 0x09	; 9
 192:	04 c0       	rjmp	.+8      	; 0x19c <__udivmodqi4_ep>

00000194 <__udivmodqi4_loop>:
 194:	99 1f       	adc	r25, r25
 196:	96 17       	cp	r25, r22
 198:	08 f0       	brcs	.+2      	; 0x19c <__udivmodqi4_ep>
 19a:	96 1b       	sub	r25, r22

0000019c <__udivmodqi4_ep>:
 19c:	88 1f       	adc	r24, r24
 19e:	7a 95       	dec	r23
 1a0:	c9 f7       	brne	.-14     	; 0x194 <__udivmodqi4_loop>
 1a2:	80 95       	com	r24
 1a4:	08 95       	ret

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
